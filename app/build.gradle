

/*
 * Copyright (c) Terl Tech Ltd • 04/04/2020, 00:05 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

apply plugin: 'com.android.library'

ext {
    artifactId = "lazysodium-android"
    groupId = "io.github.MuntashirAkon"
    version = '4.3.0'
    description = "Lazysodium (Android) makes it effortless for Android " +
            "developers to get started with Libsodium's cryptography."
    androidTestDir = "src/androidTest/java/com/goterl/lazycode/lazysodium"
    javaTestDir = "../lazysodium-java/src/test/java/com/goterl/lazycode/lazysodium"
}

group project.ext.groupId
version = project.ext.version

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    ndkVersion "21.3.6528147"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 16
        versionName project.ext.version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDirs = ['src/main/jniLibs']

        java {
            srcDir "../lazysodium-java/src/main/java"
            // Be sure to update lint.xml in the project root if any other
            // excluded files are added.
            exclude "com/goterl/lazycode/lazysodium/utils/LibraryLoader.java"
            exclude "com/goterl/lazycode/lazysodium/SodiumJava.java"
            exclude "com/goterl/lazycode/lazysodium/LazySodiumJava.java"
        }
    }

    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }

    packagingOptions {
        exclude '../lazysodium-java/src/test/java'
    }
}

tasks.withType(Javadoc).all { enabled = false }

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation("com.android.support.test.espresso:espresso-core:2.2.2", {
        exclude group: "com.android.support", module: "support-annotations"
    })
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    testImplementation 'junit:junit:4.13.1'
    implementation 'net.java.dev.jna:jna:5.6.0@aar'
}

// Tasks
task libsodium {
    doLast {
        println("=== libsodium: start ===")
        File file = new File("${projectDir.absolutePath}/src/main/jniLibs/arm64-v8a/libsodium.so")
        if (!file.exists()) {
            buildLibsodium()
        } else {
            println("Skipping libsodium since the files already exists.")
        }
        println("=== libsodium: finish ===")
    }
}

task cleanLibsodium {
    doLast {
        println("=== libsodium: clean ===")
        File file = new File("${projectDir.absolutePath}/src/main/jniLibs")
        if (file.exists()) {
            deleteDir(file)
        }
    }
}

def buildLibsodium() {
    def ndkPath = android.ndkDirectory
    def buildExec = "${projectDir.absolutePath}/../build_libsodium.sh"
    def cmdArgs = [ndkPath]
    println("NDK Path: ${ndkPath}")
    println("Exec Path: ${buildExec}")
    exec {
        workingDir = "${projectDir.absolutePath}/../"
        executable = buildExec
        args = cmdArgs
    }
}

def deleteDir(File dir) {
    if (dir != null && dir.isDirectory()) {
        String[] children = dir.list()
        if (children == null) return false
        for (String child : children) {
            boolean success = deleteDir(new File(dir, child))
            if (!success) return false
        }
        return dir.delete()
    } else if (dir != null && dir.isFile()) {
        return dir.delete()
    } else return false
}

preBuild.dependsOn libsodium
clean.dependsOn cleanLibsodium

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}
